@page
@model sudoku.Pages.Tablero.tableroModel
@{
}
@using sudoku.Pages.Tablero

<div class="text-center">
    <h1>🧩 Sudoku Master 🧩</h1>
    <form method="post">
        <div class="sudoku-board mt-4">
            <table class="table table-bordered">
                @for (int i = 0; i < 9; i++) {
                    <tr>
                        @for (int j = 0; j < 9; j++) {
                            <td>
                                <input type="number"
                                       min="1"
                                       max="9"
                                       name="inputs[@i][@j]"
                                       value="@(Model.Board[i, j])"
                                       class="sudoku-cell @(Model.MostrarColores && Model.CellColors.ContainsKey((i, j)) ? Model.CellColors[(i, j)] : "")" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>

        <div class="mt-4">
            <button type="submit" name="action" value="Verificar" class="btn btn-success">✅ Verificar Solución</button>
            <button type="submit" name="action" value="Pista"
            @(ViewData["PistasUsadas"] != null && (int) ViewData["PistasUsadas"] >= 5 ? "disabled" : "") class="btn btn-success">
                Pista
            </button>
            <button type="submit" name="action" value="MostrarSolucion" class="btn btn-success">Ver solución</button>
            <button type="submit" name="action" value="Reiniciar" class="btn btn-danger">🔁 Reiniciar</button>
            <button type="submit" name="action" value="NuevoJuego" class="btn btn-primary">🎲 Nuevo Juego</button>

            <a href="/" class="btn btn-secondary">🏠 Volver al Inicio</a>
        </div>
    </form>

    @{
        var mostrarEstadisticas = TempData["MostrarEstadisticas"] != null && (bool)TempData["MostrarEstadisticas"];
        var estadisticasJson = HttpContext.Session.GetString("EstadisticaActual");
        var estadisticas = string.IsNullOrEmpty(estadisticasJson)
    ? new sudoku.Pages.Tablero.tableroModel.EstadisticasJuego()
    : System.Text.Json.JsonSerializer.Deserialize<sudoku.Pages.Tablero.tableroModel.EstadisticasJuego>(estadisticasJson);
    }

    @if (mostrarEstadisticas) {
        <div class="modal fade" id="estadisticasModal" tabindex="-1" role="dialog" aria-labelledby="estadisticasLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="estadisticasLabel">📊 Estadísticas de la Partida</h5>
                        <button type="button" class="close text-white" data-bs-dismiss="modal" aria-label="Cerrar">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <ul class="list-group">
                            <li class="list-group-item">📝 Celdas Ingresadas: <strong>@estadisticas.CeldasIngresadas</strong></li>
                            <li class="list-group-item">🔍 Verificaciones Realizadas: <strong>@estadisticas.Verificaciones</strong></li>
                            <li class="list-group-item">❌ Errores de Verificación: <strong>@estadisticas.ErroresVerificacion</strong></li>
                            <li class="list-group-item">💡 Sugerencias Usadas: <strong>@estadisticas.SugerenciasUsadas</strong></li>
                            <li class="list-group-item">🏁 Tipo de Finalización: <strong>@estadisticas.TipoFinalizacion</strong></li>
                        </ul>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    }


 </div>

@if (TempData["MostrarEstadisticas"] != null && (bool) TempData["MostrarEstadisticas"]) {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var modal = new bootstrap.Modal(document.getElementById('estadisticasModal'));
            modal.show();
        });
    </script>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const inputs = document.querySelectorAll("input[type='text']");

        inputs.forEach(input => {
            input.addEventListener("input", () => {
                input.classList.remove("correct", "incorrect");
            });
        });
    });
</script>

<style>
    .sudoku-board {
        display: inline-block;
    }

    .sudoku-cell {
        width: 40px;
        height: 40px;
        text-align: center;
        font-size: 1.2rem;
        border: 1px solid #ccc;
    }

    /* Bordes más gruesos para los cuadrantes 3x3 */
    tr:nth-child(3n) td {
        border-bottom: 3px solid #000;
    }

    td:nth-child(3n) {
        border-right: 3px solid #000;
    }

    .sudoku-cell.correct {
        background-color: #d4edda;
    }

    .sudoku-cell.incorrect {
        background-color: #f8d7da;
    }

</style>